{"version":3,"sources":["logo.svg","serviceWorker.js","hello.js","login.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","example","textSequence","i","length","setTimeout","document","getElementById","innerHTML","Hello","className","style","marginBottom","to","src","logo","alt","id","marginTop","Btn","props","class","value","fontSize","width","height","padding","borderRadius","opacity","Component","Numboard","button","render","Login","animation","animationDuration","ReactDOM","exact","path","component","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qHAAAA,EAAOC,QAAU,IAA0B,kC,8KCYvBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,uCCMN,IAAIC,EAAU,CAAC,qBAAsB,sBAAuB,uBAAwB,0BAEpF,SAASC,EAAaC,GAChBF,EAAQG,OAASD,EACnBE,YAAW,WACTC,SAASC,eAAe,YAAYC,UAAYP,EAAQE,GACxDD,IAAeC,KACd,KACMF,EAAQG,QAAUD,GAC3BD,EAAa,GARjBA,CAAa,GAWEO,MA/Bf,WACI,OACI,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,wBAAIA,UAAU,0DAA0DC,MAAO,CAACC,aAAa,QAA7F,iBAGA,kBAAC,IAAD,CAAMC,GAAK,UACT,yBAAMC,IAAKC,IAAML,UAAU,6DAA6DM,IAAI,UAE9F,uBAAGC,GAAG,WAAWP,UAAU,yDAAyDC,MAAO,CAACO,UAAU,Y,gCCX5GC,G,2KACKC,GAUH,OACI,4BAAQC,MAAM,uBAAuBC,MAAOF,EAAOT,MAV1C,CACTO,UAAU,MACVK,SAAS,OACTC,MAAM,QACNC,OAAO,QACPC,QAAQ,OACRC,aAAa,MACbC,QAAQ,QAIHR,O,GAbCS,cAmBZC,E,kDACF,aAAa,2BACT,a,qDAIA,IAAIC,EAAS,IAAIZ,EACjB,OACI,yBAAKE,MAAM,aACP,yBAAKA,MAAM,OACP,yBAAKA,MAAM,SACNU,EAAOC,OAAO,IAEnB,yBAAKX,MAAM,SACNU,EAAOC,OAAO,IAEnB,yBAAKX,MAAM,SACNU,EAAOC,OAAO,KAGvB,yBAAKX,MAAM,OACP,yBAAKA,MAAM,SACNU,EAAOC,OAAO,IAEnB,yBAAKX,MAAM,SACNU,EAAOC,OAAO,IAEnB,yBAAKX,MAAM,SACNU,EAAOC,OAAO,KAGvB,yBAAKX,MAAM,OACP,yBAAKA,MAAM,SACNU,EAAOC,OAAO,IAEnB,yBAAKX,MAAM,SACNU,EAAOC,OAAO,IAEnB,yBAAKX,MAAM,SACNU,EAAOC,OAAO,U,GAvChBH,aA+DRI,MAhBf,WAKI,OACI,yBAAKvB,UAAU,cACX,yBAAKW,MAAM,gCAA+BV,MANnC,CACXuB,UAAW,WACXC,kBAAmB,OAKX,4CACA,kBAAC,EAAD,SCvEhBC,IAASJ,OACP,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOK,OAAK,EAACC,KAAK,IAAIC,UAAa9B,IACnC,kBAAC,IAAD,CAAO6B,KAAK,SAASC,UAAYN,MAIrC3B,SAASC,eAAe,SHmHpB,kBAAmBiC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8edae1ae.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport './App.css';\r\nimport 'animate.css';\r\nimport logo from './logo.svg';\r\nimport {Link} from 'react-router-dom';\r\nfunction Hello(){\r\n    return (\r\n        <div className=\"App\">\r\n          <header className=\"App-header\">\r\n            <h1 className=\"animate__animated animate__infinite animate__headShake \" style={{marginBottom:\"10%\"}}>\r\n              Super Journal\r\n            </h1>\r\n            <Link to = \"/login\">\r\n              <img  src={logo} className=\"App-logo animate__animated animate__flip animate__infinite\" alt=\"logo\" />\r\n            </Link>\r\n            <p id=\"sequence\" className=\"animate__animated animate__infinite animate__headShake\" style={{marginTop:\"10%\"}}>\r\n              \r\n            </p>\r\n            \r\n          </header>\r\n        </div>\r\n    );\r\n}\r\n\r\nvar example = ['Under developping.', 'Under developping..', 'Under developping...', 'Under developping....'];\r\ntextSequence(0);\r\nfunction textSequence(i){\r\n  if (example.length > i){\r\n    setTimeout(function(){\r\n      document.getElementById(\"sequence\").innerHTML = example[i];\r\n      textSequence(++i);\r\n    }, 500); // 1 second (in milliseconds)\r\n  } else if (example.length == i) { // Loop\r\n    textSequence(0);}\r\n}\r\n\r\nexport default Hello;","import React,{ Component } from 'react';\r\nimport './App.css';\r\nimport 'animate.css';\r\nimport bootstrap from 'bootstrap/dist/css/bootstrap.css'\r\nclass Btn extends Component{\r\n    render(props){\r\n        var btnstyle={\r\n            marginTop:\"20%\",\r\n            fontSize:\"150%\",\r\n            width:\"100px\",\r\n            height:\"100px\",\r\n            padding:\"auto\",\r\n            borderRadius:\"50%\",\r\n            opacity:\"70%\"\r\n        }\r\n        return(\r\n            <button class=\"btn btn-light shadow\" value={props} style={btnstyle}>\r\n                {props}\r\n            </button>\r\n        )\r\n    }\r\n}\r\n\r\nclass Numboard extends Component{\r\n    constructor(){\r\n        super();\r\n        var x=1;\r\n    }\r\n    render(){\r\n        var button = new Btn();\r\n        return(\r\n            <div class=\"container\">\r\n                <div class=\"row\">\r\n                    <div class=\"col-4\">\r\n                        {button.render(1)}\r\n                    </div>\r\n                    <div class=\"col-4\">\r\n                        {button.render(2)}\r\n                    </div>\r\n                    <div class=\"col-4\">\r\n                        {button.render(3)}\r\n                    </div>\r\n                </div>\r\n                <div class=\"row\">\r\n                    <div class=\"col-4\">\r\n                        {button.render(4)}\r\n                    </div>\r\n                    <div class=\"col-4\">\r\n                        {button.render(5)}\r\n                    </div>\r\n                    <div class=\"col-4\">\r\n                        {button.render(6)}\r\n                    </div>\r\n                </div>\r\n                <div class=\"row\">\r\n                    <div class=\"col-4\">\r\n                        {button.render(7)}\r\n                    </div>\r\n                    <div class=\"col-4\">\r\n                        {button.render(8)}\r\n                    </div>\r\n                    <div class=\"col-4\">\r\n                        {button.render(9)}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction Login(){\r\n    var loginstyle={\r\n        animation: \"fadeInUp\",\r\n        animationDuration: \"2s\"\r\n    }\r\n    return(\r\n        <div className=\"App-header\">\r\n            <div class=\"animate__animated text-center\"style={loginstyle}>\r\n                <h1>Please Login</h1>\r\n                <Numboard />\r\n            </div>\r\n            \r\n        </div>\r\n        \r\n    );\r\n}\r\nexport default Login;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter, Route, Switch} from \"react-router-dom\";\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport './font/font.css';\nimport Hello from \"./hello.js\";\nimport Login from \"./login.js\";\nReactDOM.render(\n  <BrowserRouter>\n    <Switch>\n      <Route exact path=\"/\" component = {Hello} />\n      <Route path=\"/login\" component= {Login}/>\n    </Switch>\n  </BrowserRouter>\n,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"],"sourceRoot":""}